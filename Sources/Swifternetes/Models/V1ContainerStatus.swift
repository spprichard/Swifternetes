//
// V1ContainerStatus.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** ContainerStatus contains details for the current status of this container. */

public struct V1ContainerStatus: Codable {

    /** Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;. */
    public var containerID: String?
    /** The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images */
    public var image: String
    /** ImageID of the container&#39;s image. */
    public var imageID: String
    public var lastState: V1ContainerState?
    /** This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated. */
    public var name: String
    /** Specifies whether the container has passed its readiness probe. */
    public var ready: Bool
    /** The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC. */
    public var restartCount: Int
    /** Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined. */
    public var started: Bool?
    public var state: V1ContainerState?

    public init(containerID: String?, image: String, imageID: String, lastState: V1ContainerState?, name: String, ready: Bool, restartCount: Int, started: Bool?, state: V1ContainerState?) {
        self.containerID = containerID
        self.image = image
        self.imageID = imageID
        self.lastState = lastState
        self.name = name
        self.ready = ready
        self.restartCount = restartCount
        self.started = started
        self.state = state
    }


}

