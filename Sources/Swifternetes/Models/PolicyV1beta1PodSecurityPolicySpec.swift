//
// PolicyV1beta1PodSecurityPolicySpec.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** PodSecurityPolicySpec defines the policy enforced. */

public struct PolicyV1beta1PodSecurityPolicySpec: Codable {

    /** allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true. */
    public var allowPrivilegeEscalation: Bool?
    /** AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate. */
    public var allowedCSIDrivers: [PolicyV1beta1AllowedCSIDriver]?
    /** allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author&#39;s discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities. */
    public var allowedCapabilities: [String]?
    /** allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \&quot;volumes\&quot; field. */
    public var allowedFlexVolumes: [PolicyV1beta1AllowedFlexVolume]?
    /** allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used. */
    public var allowedHostPaths: [PolicyV1beta1AllowedHostPath]?
    /** AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled. */
    public var allowedProcMountTypes: [String]?
    /** allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \&quot;*\&quot; in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.  Examples: e.g. \&quot;foo/_*\&quot; allows \&quot;foo/bar\&quot;, \&quot;foo/baz\&quot;, etc. e.g. \&quot;foo.*\&quot; allows \&quot;foo.bar\&quot;, \&quot;foo.baz\&quot;, etc. */
    public var allowedUnsafeSysctls: [String]?
    /** defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list. */
    public var defaultAddCapabilities: [String]?
    /** defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process. */
    public var defaultAllowPrivilegeEscalation: Bool?
    /** forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \&quot;*\&quot; in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.  Examples: e.g. \&quot;foo/_*\&quot; forbids \&quot;foo/bar\&quot;, \&quot;foo/baz\&quot;, etc. e.g. \&quot;foo.*\&quot; forbids \&quot;foo.bar\&quot;, \&quot;foo.baz\&quot;, etc. */
    public var forbiddenSysctls: [String]?
    public var fsGroup: PolicyV1beta1FSGroupStrategyOptions
    /** hostIPC determines if the policy allows the use of HostIPC in the pod spec. */
    public var hostIPC: Bool?
    /** hostNetwork determines if the policy allows the use of HostNetwork in the pod spec. */
    public var hostNetwork: Bool?
    /** hostPID determines if the policy allows the use of HostPID in the pod spec. */
    public var hostPID: Bool?
    /** hostPorts determines which host port ranges are allowed to be exposed. */
    public var hostPorts: [PolicyV1beta1HostPortRange]?
    /** privileged determines if a pod can request to be run as privileged. */
    public var privileged: Bool?
    /** readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to. */
    public var readOnlyRootFilesystem: Bool?
    /** requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added. */
    public var requiredDropCapabilities: [String]?
    public var runAsGroup: PolicyV1beta1RunAsGroupStrategyOptions?
    public var runAsUser: PolicyV1beta1RunAsUserStrategyOptions
    public var runtimeClass: PolicyV1beta1RuntimeClassStrategyOptions?
    public var seLinux: PolicyV1beta1SELinuxStrategyOptions
    public var supplementalGroups: PolicyV1beta1SupplementalGroupsStrategyOptions
    /** volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use &#39;*&#39;. */
    public var volumes: [String]?

    public init(allowPrivilegeEscalation: Bool?, allowedCSIDrivers: [PolicyV1beta1AllowedCSIDriver]?, allowedCapabilities: [String]?, allowedFlexVolumes: [PolicyV1beta1AllowedFlexVolume]?, allowedHostPaths: [PolicyV1beta1AllowedHostPath]?, allowedProcMountTypes: [String]?, allowedUnsafeSysctls: [String]?, defaultAddCapabilities: [String]?, defaultAllowPrivilegeEscalation: Bool?, forbiddenSysctls: [String]?, fsGroup: PolicyV1beta1FSGroupStrategyOptions, hostIPC: Bool?, hostNetwork: Bool?, hostPID: Bool?, hostPorts: [PolicyV1beta1HostPortRange]?, privileged: Bool?, readOnlyRootFilesystem: Bool?, requiredDropCapabilities: [String]?, runAsGroup: PolicyV1beta1RunAsGroupStrategyOptions?, runAsUser: PolicyV1beta1RunAsUserStrategyOptions, runtimeClass: PolicyV1beta1RuntimeClassStrategyOptions?, seLinux: PolicyV1beta1SELinuxStrategyOptions, supplementalGroups: PolicyV1beta1SupplementalGroupsStrategyOptions, volumes: [String]?) {
        self.allowPrivilegeEscalation = allowPrivilegeEscalation
        self.allowedCSIDrivers = allowedCSIDrivers
        self.allowedCapabilities = allowedCapabilities
        self.allowedFlexVolumes = allowedFlexVolumes
        self.allowedHostPaths = allowedHostPaths
        self.allowedProcMountTypes = allowedProcMountTypes
        self.allowedUnsafeSysctls = allowedUnsafeSysctls
        self.defaultAddCapabilities = defaultAddCapabilities
        self.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation
        self.forbiddenSysctls = forbiddenSysctls
        self.fsGroup = fsGroup
        self.hostIPC = hostIPC
        self.hostNetwork = hostNetwork
        self.hostPID = hostPID
        self.hostPorts = hostPorts
        self.privileged = privileged
        self.readOnlyRootFilesystem = readOnlyRootFilesystem
        self.requiredDropCapabilities = requiredDropCapabilities
        self.runAsGroup = runAsGroup
        self.runAsUser = runAsUser
        self.runtimeClass = runtimeClass
        self.seLinux = seLinux
        self.supplementalGroups = supplementalGroups
        self.volumes = volumes
    }


}

