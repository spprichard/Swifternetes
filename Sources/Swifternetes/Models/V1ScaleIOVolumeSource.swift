//
// V1ScaleIOVolumeSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


/** ScaleIOVolumeSource represents a persistent ScaleIO volume */

public struct V1ScaleIOVolumeSource: Codable {

    /** Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Default is \&quot;xfs\&quot;. */
    public var fsType: String?
    /** The host address of the ScaleIO API Gateway. */
    public var gateway: String
    /** The name of the ScaleIO Protection Domain for the configured storage. */
    public var protectionDomain: String?
    /** Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. */
    public var readOnly: Bool?
    public var secretRef: V1LocalObjectReference
    /** Flag to enable/disable SSL communication with Gateway, default false */
    public var sslEnabled: Bool?
    /** Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. */
    public var storageMode: String?
    /** The ScaleIO Storage Pool associated with the protection domain. */
    public var storagePool: String?
    /** The name of the storage system as configured in ScaleIO. */
    public var system: String
    /** The name of a volume already created in the ScaleIO system that is associated with this volume source. */
    public var volumeName: String?

    public init(fsType: String?, gateway: String, protectionDomain: String?, readOnly: Bool?, secretRef: V1LocalObjectReference, sslEnabled: Bool?, storageMode: String?, storagePool: String?, system: String, volumeName: String?) {
        self.fsType = fsType
        self.gateway = gateway
        self.protectionDomain = protectionDomain
        self.readOnly = readOnly
        self.secretRef = secretRef
        self.sslEnabled = sslEnabled
        self.storageMode = storageMode
        self.storagePool = storagePool
        self.system = system
        self.volumeName = volumeName
    }


}

